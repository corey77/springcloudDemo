<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <context:component-scan base-package="com.corey"/>

    <bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="testService"/>
        <property name="targetMethod" value="test"/>
    </bean>
    <!--异常流恢复Listener-->
    <!--<bean class="com.cdcalabar.listener.FlowRestoreListener"/>-->
    <bean id="scheduler" lazy-init="true" autowire="no"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="autoStartup" value="true" />
        <property name="triggers">
            <list>
                <!-- 配置启动时间 -->
                <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
                    <property name="jobDetail" ref="jobDetail" />
                    <property name="cronExpression" value="0/10 * * * * ?" />
                </bean>
            </list>
        </property>

        <!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
        <property name="overwriteExistingJobs" value="true"/>
        <!-- 属性 -->
        <property name="quartzProperties">
            <props>
                <!-- 集群要求必须使用持久化存储 -->
                <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreCMT</prop>
                <prop key="org.quartz.scheduler.instanceName">CoreyScheduler</prop>
                <!-- 每个集群节点要有独立的instanceId -->
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <!-- Configure ThreadPool -->
                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
                <prop key="org.quartz.threadPool.threadCount">50</prop>
                <prop key="org.quartz.threadPool.threadPriority">5</prop>
                <prop key="org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread">true</prop>
                <!-- Configure JobStore -->
                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
                <prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
                <prop key="org.quartz.jobStore.tablePrefix">qrtz_</prop>
                <prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">10</prop>
                <!-- 开启集群 -->
                <prop key="org.quartz.jobStore.isClustered">true</prop>
                <prop key="org.quartz.jobStore.clusterCheckinInterval">1500</prop>
                <prop key="org.quartz.jobStore.dontSetAutoCommitFalse">true</prop>
                <prop key="org.quartz.jobStore.txIsolationLevelSerializable">false</prop>
                <prop key="org.quartz.jobStore.dataSource">myDS</prop>
                <prop key="org.quartz.jobStore.nonManagedTXDataSource">myDS</prop>
                <prop key="org.quartz.jobStore.useProperties">false</prop>
                <!-- Configure Datasources -->
                <prop key="org.quartz.dataSource.myDS.driver">${db.driver}</prop>
                <prop key="org.quartz.dataSource.myDS.URL">${db.url}</prop>
                <prop key="org.quartz.dataSource.myDS.user">${db.username}</prop>
                <prop key="org.quartz.dataSource.myDS.password">${db.password}</prop>
                <prop key="org.quartz.dataSource.myDS.maxConnections">${db.maxConnections}</prop>
                <prop key="org.quartz.dataSource.myDS.validationQuery">select 0 from qrtz_locks</prop>
            </props>
        </property>
        <property name="applicationContextSchedulerContextKey" value="applicationContext" />
    </bean>
    <!-- 任务调度线程池 -->
    <bean id="taskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="20"/>
        <property name="maxPoolSize" value="100"/>
        <property name="queueCapacity" value="1000"/>
    </bean>

    <task:annotation-driven/>

    <!-- DAP Spark任务调度线程池 -->
    <bean id="workflowExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="${pool.coreSize}"/>
        <property name="maxPoolSize" value="${pool.maxSize}"/>
        <property name="queueCapacity" value="${pool.queueCapacity}"/>
        <!-- 线程池维护线程所允许的空闲时间 -->
        <property name="keepAliveSeconds" value="${pool.keepAliveSeconds}"/>
    </bean>

</beans>